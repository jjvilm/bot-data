  <script>
  function fetchAndDisplayEquipmentSets() {
  // Fetch the equipment sets and display them
  fetch('/deDashboard/getEquipmentSets')
    .then(response => response.json())
    .then(data => {
      const equipmentSetsContainer = document.getElementById('equipment-sets');
      
      // Clear the container before adding new content (in case you call this function again)
      equipmentSetsContainer.innerHTML = '';

      data.forEach(set => {
        const setDiv = document.createElement('div');
        const setBreak = document.createElement('br');
        setDiv.classList.add('equipment-set');
        setDiv.setAttribute('data-set-id', set._id); // Add a unique identifier
        
        const setNameLabel = document.createElement('label');
        setNameLabel.innerText = set.set_name;
        setDiv.appendChild(setNameLabel);
        setDiv.appendChild(setBreak);

        // Add Load button
        const loadButton = document.createElement('button');
        loadButton.innerText = "Load";
        loadButton.onclick = () => loadEquipmentSet(set);
        setDiv.appendChild(loadButton);

        // Display the 9 images for this set
        ['head', 'neck', 'torso', 'legs', 'right_hand', 'left_hand', 'hands', 'feet', 'ammunition', 'cape', 'jewelry'].forEach(slot => {
          const img = document.createElement('img');
          img.src = set[slot];
          img.style = "width: auto; height: auto;";
          // img.onclick = () => updateImage(slot, set._id); // Update the image on click
          setDiv.appendChild(img);
        });
        
        //update button
        const updateButton = document.createElement('button');
        updateButton.innerText = "update";
        updateButton.onclick = () => updateEquipmentSet(set._id); // Save the set on click
        setDiv.appendChild(updateButton);

        equipmentSetsContainer.appendChild(setDiv);
      });
    })
    .catch(error => {
      console.error('Error fetching equipment sets:', error);
    });
}

  function updateImage(slot, setId) {
    const itemName = prompt(`Enter the name of the ${slot}:`);
    if (!itemName) {
      // Clear the image in the set on the frontend
      document.querySelector(`img[src="${slot}"]`).src = '';
      };

    const imgUrl = `https://oldschool.runescape.wiki/images/${itemName}.png?0a33f`;

    fetch(imgUrl)
      .then(response => {
        if (response.ok) {
          // Update the image in the set on the frontend
          document.querySelector(`img[src="${slot}"]`).src = imgUrl;

          // You can also store the updated image in the set object if needed
        } else {
          alert('Image not found');
        }
      })
      .catch(error => {
        alert('Error fetching the image');
      });
  }

  let currentlyLoadedSet = null; // Keep track of the currently loaded set
  // Load the equipment set images when the Load button is clicked
  function loadEquipmentSet(set) {
    // If there is a previously loaded set, remove the highlight
    if (currentlyLoadedSet) {
      currentlyLoadedSet.classList.remove('highlighted');
    }

    // Get the container div for this set
    const setDiv = document.querySelector(`[data-set-id="${set._id}"]`);

    // Add the 'highlighted' class to the currently loaded set
    setDiv.classList.add('highlighted');

    // Update the current set reference
    currentlyLoadedSet = setDiv;

    // Loop through each slot and load the corresponding image
    ['head', 'neck', 'torso', 'legs', 'right_hand', 'left_hand', 'hands', 'feet', 'ammunition', 'cape', 'jewelry'].forEach(slot => {
        const imgElement = document.getElementById(`${slot}-img`);
        imgElement.src = set[slot]; // Get the source for the slot

        // Check if the image source is not an empty string
        if (imgElement.src.includes('wiki')) {
            imgElement.style.filter = 'none'; // Remove filter style
            imgElement.style.border = ''; // Remove the border if you want
        } else {
            imgElement.src = "/images/Bank_filler.png"
        }
    });
}


function updateEquipmentSet(setId) {
    const setData = {
      _id: setId,
      head: document.getElementById('head-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('head-img').src : '',
      cape: document.getElementById('cape-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('cape-img').src : '',
      neck: document.getElementById('neck-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('neck-img').src : '',
      ammunition: document.getElementById('ammunition-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('ammunition-img').src : '',
      left_hand: document.getElementById('left_hand-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('left_hand-img').src : '',
      torso: document.getElementById('torso-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('torso-img').src : '',
      right_hand: document.getElementById('right_hand-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('right_hand-img').src : '',
      legs: document.getElementById('legs-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('legs-img').src : '',
      hands: document.getElementById('hands-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('hands-img').src : '',
      feet: document.getElementById('feet-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('feet-img').src : '',
      jewelry: document.getElementById('jewelry-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('jewelry-img').src : '',
  };

    fetch('/deDashboard/updateEquipmentSet', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(setData),
    })
    .then(response => {
      if (response.ok) {
        fetchAndDisplayEquipmentSets()
      } else {
        alert('Error updating equipment set');
      }
    })
    .catch(error => {
      alert('Error updating the equipment set');
    });
  }

function findItem(slot) {
  const itemName = prompt(`Enter the name of the ${slot}:`);

  if (!itemName) {
    // Clear the image in the set on the frontend
    document.getElementById(`${slot}-img`).src = '/images/Bank_filler.png'
    return
  }; 

  // Check if the input is alphanumeric (using regex)
  const isAlphanumeric = /^[a-zA-Z0-9()' -]+$/.test(itemName);
  
  if (isAlphanumeric) {
      // Transform the itemName
      const formattedItemName = itemName
          .trim() // Remove leading and trailing spaces
          .toLowerCase() // Convert the whole string to lowercase
          .replace(/ /g, "_") // Replace spaces with underscores
          .replace(/^(.)/, (match) => match.toUpperCase()); // Capitalize the first letter

          const imgUrl = `https://oldschool.runescape.wiki/images/${formattedItemName}.png?0a33f`;

          // Fetch the image and check for errors
          fetch(imgUrl)
            .then(response => {
              if (response.ok) {
                // Set image
                document.getElementById(`${slot}-img`).src = imgUrl;

                // remove filter that makes imgs white
                const imgElement = document.getElementById(`${slot}-img`);
                
                // Check if the image source is not an empty string
                if (imgElement.src !== '') {
                    imgElement.style.filter = 'none'; // Remove filter style
                    imgElement.style.border = ''; // Remove the border if you want
                } else {
                    imgElement.style.filter = 'brightness(0) invert(1)'; // Apply filter if the source is empty
                    imgElement.style.border = '2px solid white'; // Add white border
                }

              } else {
                alert('Image not found');
              }
            })
            .catch(error => {
              alert('Error fetching the image');
            });
  } else {
      console.error("The item name must be alphanumeric.");
  };  
};

function openCreateModal() {
  document.getElementById('createModal').style.display = 'block';
}

function createEquipmentSet() {
  const setData = {
      set_name: document.getElementById('set_name').value,
      head: document.getElementById('head-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('head-img').src : '',
      cape: document.getElementById('cape-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('cape-img').src : '',
      neck: document.getElementById('neck-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('neck-img').src : '',
      ammunition: document.getElementById('ammunition-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('ammunition-img').src : '',
      left_hand: document.getElementById('left_hand-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('left_hand-img').src : '',
      torso: document.getElementById('torso-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('torso-img').src : '',
      right_hand: document.getElementById('right_hand-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('right_hand-img').src : '',
      legs: document.getElementById('legs-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('legs-img').src : '',
      hands: document.getElementById('hands-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('hands-img').src : '',
      feet: document.getElementById('feet-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('feet-img').src : '',
      jewelry: document.getElementById('jewelry-img').src.includes("https://oldschool.runescape.wiki") ? document.getElementById('jewelry-img').src : '',
  };

  fetch('/deDashboard/createEquipmentSet', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json',
      },
      body: JSON.stringify(setData),
  })
  .then(response => {
      if (response.ok) {
          // Reload equipment
          fetchAndDisplayEquipmentSets()
          // Success: show success label
          const successLabel = document.getElementById('success-label');
          successLabel.innerText = 'Equipment set saved successfully!';
          successLabel.style.display = 'block';

          // Hide label after 3 seconds
          setTimeout(() => {
              successLabel.style.display = 'none';
          }, 3000);

          // Hide the modal
          const createModal = document.getElementById('createModal');
          createModal.style.display = 'none';
      } else {
          // Handle any other status codes (4xx, 5xx)
          return response.json().then(data => {
              throw new Error(data.message || 'Error creating the equipment set');
          });
      }
  })
  .catch(error => {
      alert(error.message);
  });
}

/// Fetch the latest bots and populate the dropdown
async function fetchLatestBots() {
    try {
      const response = await fetch('/qcDashboard/latest-bots');
      const bots = await response.json();

      // console.log('Fetched bots:', bots); // Debugging line to verify the fetched data

      const botSelect = document.getElementById('bot-select');

      // Clear existing options (if any)
      botSelect.innerHTML = '<option value="" disabled selected>Select a bot</option>';

      // Check if bots array is valid and contains data
      if (Array.isArray(bots) && bots.length > 0) {
        bots.forEach(bot => {
          const option = document.createElement('option');
          option.value = bot._id; // Store the bot _id in the option value
          option.textContent = bot.bot_name; // Display the bot name
          botSelect.appendChild(option);
        });
      } else {
        console.error('No bots available or invalid data format.');
      }
    } catch (error) {
      console.error('Error fetching latest bots:', error);
    }
  }

// Handle the Apply button click
document.getElementById('apply-button').addEventListener('click', async function() {
    const botSelect = document.getElementById('bot-select');
    const selectedBotId = botSelect.value;
    // console.log("selectedBotId",selectedBotId)
    
    // no bot selected from drop down menu
    if (!selectedBotId) {
      alert('Please select a bot.');
      return;
    }

    // Ensure that currentlyLoadedSet is not null and has the equipment set loaded
    // const equipmentSetId = currentlyLoadedSet ? currentlyLoadedSet.dataset.setId : null;
    const equipmentSetName = currentlyLoadedSet ? currentlyLoadedSet.querySelector('label').innerText : null;

    // Check if the equipment set name was found
    if (!equipmentSetName) {
      alert('No equipment set is currently loaded.');
      return;
    }

    // Send the data to the server
    try {
      const response = await fetch('/qcDashboard/botUpdateEquipmentSetName', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          botId: selectedBotId,
          equipmentSetName: equipmentSetName
        }) 
      });

        if (!response.ok) {
          console.error('Server responded with an error:', response.statusText);
          return;
        }

      // Show success message
      const successMessage = document.getElementById('apply-success-message');
      successMessage.style.display = 'block';
      setTimeout(() => {
        successMessage.style.display = 'none';
      }, 3000);
    

    } catch (error) {
      console.error('Error updating equipment set:', error);
    }
  });


// Call the function to populate the dropdown when the page loads
document.addEventListener('DOMContentLoaded', fetchLatestBots);
fetchAndDisplayEquipmentSets()
</script>